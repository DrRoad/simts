// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// reverse_vec
arma::vec reverse_vec(arma::vec x);
RcppExport SEXP simts_reverse_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(reverse_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// Mod_cpp
arma::vec Mod_cpp(const arma::cx_vec& x);
RcppExport SEXP simts_Mod_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cx_vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Mod_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// gen_wn
arma::vec gen_wn(const unsigned int N, const double sigma2);
RcppExport SEXP simts_gen_wn(SEXP NSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(gen_wn(N, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// gen_dr
arma::vec gen_dr(const unsigned int N, const double omega);
RcppExport SEXP simts_gen_dr(SEXP NSEXP, SEXP omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type omega(omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_dr(N, omega));
    return rcpp_result_gen;
END_RCPP
}
// gen_qn
arma::vec gen_qn(const unsigned int N, double q2);
RcppExport SEXP simts_gen_qn(SEXP NSEXP, SEXP q2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type q2(q2SEXP);
    rcpp_result_gen = Rcpp::wrap(gen_qn(N, q2));
    return rcpp_result_gen;
END_RCPP
}
// gen_ar1
arma::vec gen_ar1(const unsigned int N, const double phi, const double sigma2);
RcppExport SEXP simts_gen_ar1(SEXP NSEXP, SEXP phiSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(gen_ar1(N, phi, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// gen_rw
arma::vec gen_rw(const unsigned int N, const double sigma2);
RcppExport SEXP simts_gen_rw(SEXP NSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(gen_rw(N, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// gen_ma1
arma::vec gen_ma1(const unsigned int N, const double theta, const double sigma2);
RcppExport SEXP simts_gen_ma1(SEXP NSEXP, SEXP thetaSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(gen_ma1(N, theta, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// gen_arma11
arma::vec gen_arma11(const unsigned int N, const double phi, const double theta, const double sigma2);
RcppExport SEXP simts_gen_arma11(SEXP NSEXP, SEXP phiSEXP, SEXP thetaSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(gen_arma11(N, phi, theta, sigma2));
    return rcpp_result_gen;
END_RCPP
}
// gen_arma
arma::vec gen_arma(const unsigned int N, const arma::vec& ar, const arma::vec& ma, const double sigma2, unsigned int n_start);
RcppExport SEXP simts_gen_arma(SEXP NSEXP, SEXP arSEXP, SEXP maSEXP, SEXP sigma2SEXP, SEXP n_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_start(n_startSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_arma(N, ar, ma, sigma2, n_start));
    return rcpp_result_gen;
END_RCPP
}
// gen_sarma
arma::vec gen_sarma(const unsigned int N, const arma::vec& ar, const arma::vec& ma, const arma::vec& sar, const arma::vec& sma, const double sigma2, unsigned int s, unsigned int n_start);
RcppExport SEXP simts_gen_sarma(SEXP NSEXP, SEXP arSEXP, SEXP maSEXP, SEXP sarSEXP, SEXP smaSEXP, SEXP sigma2SEXP, SEXP sSEXP, SEXP n_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sar(sarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sma(smaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_start(n_startSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_sarma(N, ar, ma, sar, sma, sigma2, s, n_start));
    return rcpp_result_gen;
END_RCPP
}
// gen_arima
arma::vec gen_arima(const unsigned int N, const arma::vec& ar, const unsigned int d, const arma::vec& ma, const double sigma2, unsigned int n_start);
RcppExport SEXP simts_gen_arima(SEXP NSEXP, SEXP arSEXP, SEXP dSEXP, SEXP maSEXP, SEXP sigma2SEXP, SEXP n_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_start(n_startSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_arima(N, ar, d, ma, sigma2, n_start));
    return rcpp_result_gen;
END_RCPP
}
// gen_sarima
arma::vec gen_sarima(const unsigned int N, const arma::vec& ar, unsigned int d, const arma::vec& ma, const arma::vec& sar, unsigned int sd, const arma::vec& sma, const double sigma2, unsigned int s, unsigned int n_start);
RcppExport SEXP simts_gen_sarima(SEXP NSEXP, SEXP arSEXP, SEXP dSEXP, SEXP maSEXP, SEXP sarSEXP, SEXP sdSEXP, SEXP smaSEXP, SEXP sigma2SEXP, SEXP sSEXP, SEXP n_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sar(sarSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sma(smaSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_start(n_startSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_sarima(N, ar, d, ma, sar, sd, sma, sigma2, s, n_start));
    return rcpp_result_gen;
END_RCPP
}
// gen_generic_sarima
arma::vec gen_generic_sarima(const unsigned int N, const arma::vec& theta_values, const arma::vec& objdesc, double sigma2, unsigned int n_start);
RcppExport SEXP simts_gen_generic_sarima(SEXP NSEXP, SEXP theta_valuesSEXP, SEXP objdescSEXP, SEXP sigma2SEXP, SEXP n_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta_values(theta_valuesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type objdesc(objdescSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_start(n_startSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_generic_sarima(N, theta_values, objdesc, sigma2, n_start));
    return rcpp_result_gen;
END_RCPP
}
// gen_model
arma::vec gen_model(unsigned int N, const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc);
RcppExport SEXP simts_gen_model(SEXP NSEXP, SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_model(N, theta, desc, objdesc));
    return rcpp_result_gen;
END_RCPP
}
// gen_lts_cpp
arma::mat gen_lts_cpp(unsigned int N, const arma::vec& theta, const std::vector<std::string>& desc, const arma::field<arma::vec>& objdesc);
RcppExport SEXP simts_gen_lts_cpp(SEXP NSEXP, SEXP thetaSEXP, SEXP descSEXP, SEXP objdescSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type objdesc(objdescSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_lts_cpp(N, theta, desc, objdesc));
    return rcpp_result_gen;
END_RCPP
}
// do_polyroot_arma
arma::cx_vec do_polyroot_arma(const arma::cx_vec& z);
RcppExport SEXP simts_do_polyroot_arma(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cx_vec& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(do_polyroot_arma(z));
    return rcpp_result_gen;
END_RCPP
}
// do_polyroot_cpp
std::vector< std::complex<double> > do_polyroot_cpp(const std::vector< std::complex<double> >& z);
RcppExport SEXP simts_do_polyroot_cpp(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector< std::complex<double> >& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(do_polyroot_cpp(z));
    return rcpp_result_gen;
END_RCPP
}
// read_imu
arma::field<arma::mat> read_imu(std::string file_path, std::string imu_type);
RcppExport SEXP simts_read_imu(SEXP file_pathSEXP, SEXP imu_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type imu_type(imu_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(read_imu(file_path, imu_type));
    return rcpp_result_gen;
END_RCPP
}
// diff_cpp
arma::vec diff_cpp(arma::vec x, unsigned int lag, unsigned int differences);
RcppExport SEXP simts_diff_cpp(SEXP xSEXP, SEXP lagSEXP, SEXP differencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type differences(differencesSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_cpp(x, lag, differences));
    return rcpp_result_gen;
END_RCPP
}
// cfilter
arma::vec cfilter(arma::vec x, arma::vec filter, int sides, bool circular);
RcppExport SEXP simts_cfilter(SEXP xSEXP, SEXP filterSEXP, SEXP sidesSEXP, SEXP circularSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< int >::type sides(sidesSEXP);
    Rcpp::traits::input_parameter< bool >::type circular(circularSEXP);
    rcpp_result_gen = Rcpp::wrap(cfilter(x, filter, sides, circular));
    return rcpp_result_gen;
END_RCPP
}
// rfilter
arma::vec rfilter(arma::vec x, arma::vec filter, arma::vec init);
RcppExport SEXP simts_rfilter(SEXP xSEXP, SEXP filterSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(rfilter(x, filter, init));
    return rcpp_result_gen;
END_RCPP
}
// mean_diff
double mean_diff(const arma::vec& x);
RcppExport SEXP simts_mean_diff(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mean_diff(x));
    return rcpp_result_gen;
END_RCPP
}
// intgr_vec
arma::vec intgr_vec(const arma::vec& x, const arma::vec& xi, unsigned int lag);
RcppExport SEXP simts_intgr_vec(SEXP xSEXP, SEXP xiSEXP, SEXP lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag(lagSEXP);
    rcpp_result_gen = Rcpp::wrap(intgr_vec(x, xi, lag));
    return rcpp_result_gen;
END_RCPP
}
// diff_inv_values
arma::vec diff_inv_values(const arma::vec& x, unsigned int lag, unsigned int d, const arma::vec& xi);
RcppExport SEXP simts_diff_inv_values(SEXP xSEXP, SEXP lagSEXP, SEXP dSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_inv_values(x, lag, d, xi));
    return rcpp_result_gen;
END_RCPP
}
// diff_inv
arma::vec diff_inv(const arma::vec& x, unsigned int lag, unsigned int d);
RcppExport SEXP simts_diff_inv(SEXP xSEXP, SEXP lagSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_inv(x, lag, d));
    return rcpp_result_gen;
END_RCPP
}
// sarma_calculate_spadding
arma::vec sarma_calculate_spadding(unsigned int np, unsigned int nq, unsigned int nsp, unsigned int nsq, unsigned int ns);
RcppExport SEXP simts_sarma_calculate_spadding(SEXP npSEXP, SEXP nqSEXP, SEXP nspSEXP, SEXP nsqSEXP, SEXP nsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type np(npSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nq(nqSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsp(nspSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsq(nsqSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ns(nsSEXP);
    rcpp_result_gen = Rcpp::wrap(sarma_calculate_spadding(np, nq, nsp, nsq, ns));
    return rcpp_result_gen;
END_RCPP
}
// sarma_params_construct
arma::vec sarma_params_construct(const arma::vec& ar, const arma::vec& ma, const arma::vec& sar, const arma::vec& sma);
RcppExport SEXP simts_sarma_params_construct(SEXP arSEXP, SEXP maSEXP, SEXP sarSEXP, SEXP smaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ma(maSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sar(sarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sma(smaSEXP);
    rcpp_result_gen = Rcpp::wrap(sarma_params_construct(ar, ma, sar, sma));
    return rcpp_result_gen;
END_RCPP
}
// sarma_expand_unguided
arma::field<arma::vec> sarma_expand_unguided(const arma::vec& params, unsigned int np, unsigned int nq, unsigned int nsp, unsigned int nsq, unsigned int ns, unsigned int p, unsigned int q);
RcppExport SEXP simts_sarma_expand_unguided(SEXP paramsSEXP, SEXP npSEXP, SEXP nqSEXP, SEXP nspSEXP, SEXP nsqSEXP, SEXP nsSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type np(npSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nq(nqSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsp(nspSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nsq(nsqSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(sarma_expand_unguided(params, np, nq, nsp, nsq, ns, p, q));
    return rcpp_result_gen;
END_RCPP
}
// sarma_expand
arma::field<arma::vec> sarma_expand(const arma::vec& params, const arma::vec& objdesc);
RcppExport SEXP simts_sarma_expand(SEXP paramsSEXP, SEXP objdescSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type objdesc(objdescSEXP);
    rcpp_result_gen = Rcpp::wrap(sarma_expand(params, objdesc));
    return rcpp_result_gen;
END_RCPP
}
// minroot
double minroot(const arma::cx_vec& x);
RcppExport SEXP simts_minroot(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cx_vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(minroot(x));
    return rcpp_result_gen;
END_RCPP
}
// count_models
std::map<std::string, int> count_models(const std::vector<std::string>& desc);
RcppExport SEXP simts_count_models(SEXP descSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type desc(descSEXP);
    rcpp_result_gen = Rcpp::wrap(count_models(desc));
    return rcpp_result_gen;
END_RCPP
}
// ar1_to_gm
arma::vec ar1_to_gm(arma::vec theta, double freq);
RcppExport SEXP simts_ar1_to_gm(SEXP thetaSEXP, SEXP freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type freq(freqSEXP);
    rcpp_result_gen = Rcpp::wrap(ar1_to_gm(theta, freq));
    return rcpp_result_gen;
END_RCPP
}
// gm_to_ar1
arma::vec gm_to_ar1(arma::vec theta, double freq);
RcppExport SEXP simts_gm_to_ar1(SEXP thetaSEXP, SEXP freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type freq(freqSEXP);
    rcpp_result_gen = Rcpp::wrap(gm_to_ar1(theta, freq));
    return rcpp_result_gen;
END_RCPP
}
// model_objdesc
arma::field<arma::vec> model_objdesc(std::vector<std::string> desc);
RcppExport SEXP simts_model_objdesc(SEXP descSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type desc(descSEXP);
    rcpp_result_gen = Rcpp::wrap(model_objdesc(desc));
    return rcpp_result_gen;
END_RCPP
}
// model_theta
arma::vec model_theta(std::vector<std::string> desc);
RcppExport SEXP simts_model_theta(SEXP descSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type desc(descSEXP);
    rcpp_result_gen = Rcpp::wrap(model_theta(desc));
    return rcpp_result_gen;
END_RCPP
}
// model_process_desc
std::vector<std::string> model_process_desc(std::vector<std::string> desc);
RcppExport SEXP simts_model_process_desc(SEXP descSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type desc(descSEXP);
    rcpp_result_gen = Rcpp::wrap(model_process_desc(desc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"simts_reverse_vec", (DL_FUNC) &simts_reverse_vec, 1},
    {"simts_Mod_cpp", (DL_FUNC) &simts_Mod_cpp, 1},
    {"simts_gen_wn", (DL_FUNC) &simts_gen_wn, 2},
    {"simts_gen_dr", (DL_FUNC) &simts_gen_dr, 2},
    {"simts_gen_qn", (DL_FUNC) &simts_gen_qn, 2},
    {"simts_gen_ar1", (DL_FUNC) &simts_gen_ar1, 3},
    {"simts_gen_rw", (DL_FUNC) &simts_gen_rw, 2},
    {"simts_gen_ma1", (DL_FUNC) &simts_gen_ma1, 3},
    {"simts_gen_arma11", (DL_FUNC) &simts_gen_arma11, 4},
    {"simts_gen_arma", (DL_FUNC) &simts_gen_arma, 5},
    {"simts_gen_sarma", (DL_FUNC) &simts_gen_sarma, 8},
    {"simts_gen_arima", (DL_FUNC) &simts_gen_arima, 6},
    {"simts_gen_sarima", (DL_FUNC) &simts_gen_sarima, 10},
    {"simts_gen_generic_sarima", (DL_FUNC) &simts_gen_generic_sarima, 5},
    {"simts_gen_model", (DL_FUNC) &simts_gen_model, 4},
    {"simts_gen_lts_cpp", (DL_FUNC) &simts_gen_lts_cpp, 4},
    {"simts_do_polyroot_arma", (DL_FUNC) &simts_do_polyroot_arma, 1},
    {"simts_do_polyroot_cpp", (DL_FUNC) &simts_do_polyroot_cpp, 1},
    {"simts_read_imu", (DL_FUNC) &simts_read_imu, 2},
    {"simts_diff_cpp", (DL_FUNC) &simts_diff_cpp, 3},
    {"simts_cfilter", (DL_FUNC) &simts_cfilter, 4},
    {"simts_rfilter", (DL_FUNC) &simts_rfilter, 3},
    {"simts_mean_diff", (DL_FUNC) &simts_mean_diff, 1},
    {"simts_intgr_vec", (DL_FUNC) &simts_intgr_vec, 3},
    {"simts_diff_inv_values", (DL_FUNC) &simts_diff_inv_values, 4},
    {"simts_diff_inv", (DL_FUNC) &simts_diff_inv, 3},
    {"simts_sarma_calculate_spadding", (DL_FUNC) &simts_sarma_calculate_spadding, 5},
    {"simts_sarma_params_construct", (DL_FUNC) &simts_sarma_params_construct, 4},
    {"simts_sarma_expand_unguided", (DL_FUNC) &simts_sarma_expand_unguided, 8},
    {"simts_sarma_expand", (DL_FUNC) &simts_sarma_expand, 2},
    {"simts_minroot", (DL_FUNC) &simts_minroot, 1},
    {"simts_count_models", (DL_FUNC) &simts_count_models, 1},
    {"simts_ar1_to_gm", (DL_FUNC) &simts_ar1_to_gm, 2},
    {"simts_gm_to_ar1", (DL_FUNC) &simts_gm_to_ar1, 2},
    {"simts_model_objdesc", (DL_FUNC) &simts_model_objdesc, 1},
    {"simts_model_theta", (DL_FUNC) &simts_model_theta, 1},
    {"simts_model_process_desc", (DL_FUNC) &simts_model_process_desc, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_simts(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
